/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/users/me/access-keys": {
    /**
     * List My Access Keys
     * @description List the current user's access keys.
     */
    get: operations["list_my_access_keys_api_v1_users_me_access_keys_get"];
    /**
     * Create My Access Key
     * @description Create a new access key for the current user.
     */
    post: operations["create_my_access_key_api_v1_users_me_access_keys_post"];
  };
  "/api/v1/users/me/access-keys/{key_id}": {
    /**
     * Delete My Access Key
     * @description Delete one of the current user's access keys.
     */
    delete: operations["delete_my_access_key_api_v1_users_me_access_keys__key_id__delete"];
  };
  "/api/v1/api/version": {
    /**
     * Show Version
     * @description Describe the API version.
     */
    get: operations["show_version_api_v1_api_version_get"];
  };
  "/api/v1/doi-identifiers/search": {
    /**
     * Search Doi Identifiers
     * @description Search DOI identifiers.
     */
    post: operations["search_doi_identifiers_api_v1_doi_identifiers_search_post"];
  };
  "/api/v1/experiment-sets/{urn}": {
    /**
     * Fetch Experiment Set
     * @description Fetch a single experiment set by URN.
     */
    get: operations["fetch_experiment_set_api_v1_experiment_sets__urn__get"];
  };
  "/api/v1/experiments/": {
    /**
     * List Experiments
     * @description List experiments.
     */
    get: operations["list_experiments_api_v1_experiments__get"];
    /**
     * Create Experiment
     * @description Create an experiment.
     */
    post: operations["create_experiment_api_v1_experiments__post"];
  };
  "/api/v1/experiments/search": {
    /**
     * Search Experiments
     * @description Search experiments.
     */
    post: operations["search_experiments_api_v1_experiments_search_post"];
  };
  "/api/v1/me/experiments/search": {
    /**
     * Search My Experiments
     * @description Search experiments created by the current user..
     */
    post: operations["search_my_experiments_api_v1_me_experiments_search_post"];
  };
  "/api/v1/experiments/{urn}": {
    /**
     * Fetch Experiment
     * @description Fetch a single experiment by URN.
     */
    get: operations["fetch_experiment_api_v1_experiments__urn__get"];
    /**
     * Update Experiment
     * @description Update an experiment.
     */
    put: operations["update_experiment_api_v1_experiments__urn__put"];
    /**
     * Delete Experiment
     * @description Delete a experiment .
     *
     * Raises
     *
     * Returns
     * _______
     * Does not return anything
     * string : HTTP code 200 successful but returning content
     * or
     * communitcate to client whether the operation succeeded
     * 204 if successful but not returning content - likely going with this
     */
    delete: operations["delete_experiment_api_v1_experiments__urn__delete"];
  };
  "/api/v1/experiments/{urn}/score-sets": {
    /**
     * Get Experiment Score Sets
     * @description Get all score sets belonging to an experiment.
     */
    get: operations["get_experiment_score_sets_api_v1_experiments__urn__score_sets_get"];
  };
  "/api/v1/hgvs/fetch/{accession}": {
    /**
     * Hgvs Fetch
     * @description List stored sequences
     */
    get: operations["hgvs_fetch_api_v1_hgvs_fetch__accession__get"];
  };
  "/api/v1/hgvs/validate": {
    /**
     * Hgvs Validate
     * @description List stored sequences
     */
    post: operations["hgvs_validate_api_v1_hgvs_validate_post"];
  };
  "/api/v1/hgvs/assemblies": {
    /**
     * List Assemblies
     * @description List stored assemblies
     */
    get: operations["list_assemblies_api_v1_hgvs_assemblies_get"];
  };
  "/api/v1/hgvs/grouped-assemblies": {
    /**
     * List Assemblies Grouped
     * @description List stored assemblies in groups of major/minor versions
     */
    get: operations["list_assemblies_grouped_api_v1_hgvs_grouped_assemblies_get"];
  };
  "/api/v1/hgvs/{assembly}/accessions": {
    /**
     * List Accessions
     * @description List stored accessions
     */
    get: operations["list_accessions_api_v1_hgvs__assembly__accessions_get"];
  };
  "/api/v1/hgvs/genes": {
    /** List Genes */
    get: operations["list_genes_api_v1_hgvs_genes_get"];
  };
  "/api/v1/hgvs/genes/{gene}": {
    /** Gene Info */
    get: operations["gene_info_api_v1_hgvs_genes__gene__get"];
  };
  "/api/v1/hgvs/transcripts/gene/{gene}": {
    /** List Transcripts For Gene */
    get: operations["list_transcripts_for_gene_api_v1_hgvs_transcripts_gene__gene__get"];
  };
  "/api/v1/hgvs/transcripts/{transcript}": {
    /** Transcript Info */
    get: operations["transcript_info_api_v1_hgvs_transcripts__transcript__get"];
  };
  "/api/v1/hgvs/transcripts/protein/{transcript}": {
    /** Convert To Protein */
    get: operations["convert_to_protein_api_v1_hgvs_transcripts_protein__transcript__get"];
  };
  "/api/v1/licenses/": {
    /**
     * List Licenses
     * @description List licenses.
     */
    get: operations["list_licenses_api_v1_licenses__get"];
  };
  "/api/v1/licenses/{item_id}": {
    /**
     * Fetch License
     * @description Fetch a single license by ID.
     */
    get: operations["fetch_license_api_v1_licenses__item_id__get"];
  };
  "/api/v1/mapped-variants/{urn}": {
    /**
     * Show Mapped Variant
     * @description Fetch a mapped variant by URN.
     */
    get: operations["show_mapped_variant_api_v1_mapped_variants__urn__get"];
  };
  "/api/v1/publication-identifiers/": {
    /**
     * List Publications
     * @description List stored all stored publications.
     */
    get: operations["list_publications_api_v1_publication_identifiers__get"];
  };
  "/api/v1/publication-identifiers/{identifier}": {
    /**
     * Fetch Publication By Identifier
     * @description Fetch a single publication by identifier.
     */
    get: operations["fetch_publication_by_identifier_api_v1_publication_identifiers__identifier__get"];
  };
  "/api/v1/publication-identifiers/{db_name}/{identifier}": {
    /**
     * Fetch Publication By Dbname And Identifier
     * @description Fetch a single publication by db name and identifier.
     */
    get: operations["fetch_publication_by_dbname_and_identifier_api_v1_publication_identifiers__db_name___identifier__get"];
  };
  "/api/v1/publication-identifiers/journals": {
    /**
     * List Publication Journal Names
     * @description List distinct journal names, in alphabetical order.
     */
    get: operations["list_publication_journal_names_api_v1_publication_identifiers_journals_get"];
  };
  "/api/v1/publication-identifiers/databases": {
    /**
     * List Publication Database Names
     * @description List distinct database names, in alphabetical order.
     */
    get: operations["list_publication_database_names_api_v1_publication_identifiers_databases_get"];
  };
  "/api/v1/publication-identifiers/search": {
    /**
     * Search Publication Identifiers
     * @description Search publication identifiers via a TextSearch query.
     */
    post: operations["search_publication_identifiers_api_v1_publication_identifiers_search_post"];
  };
  "/api/v1/publication-identifiers/search/{identifier}": {
    /**
     * Search Publications By Identifier
     * @description Search publication identifiers via their identifier.
     */
    get: operations["search_publications_by_identifier_api_v1_publication_identifiers_search__identifier__get"];
  };
  "/api/v1/publication-identifiers/search/{db_name}/{identifier}": {
    /**
     * Search Publications By Identifier And Db
     * @description Search publication identifiers via their identifier and database.
     */
    get: operations["search_publications_by_identifier_and_db_api_v1_publication_identifiers_search__db_name___identifier__get"];
  };
  "/api/v1/publication-identifiers/search-external": {
    /**
     * Search External Publication Identifiers
     * @description Search external publication identifiers via a TextSearch query.
     * Technically, this should be some sort of accepted publication identifier.
     */
    post: operations["search_external_publication_identifiers_api_v1_publication_identifiers_search_external_post"];
  };
  "/api/v1/raw-read-identifiers/search": {
    /**
     * Search Raw Read Identifiers
     * @description Search Raw Read identifiers.
     */
    post: operations["search_raw_read_identifiers_api_v1_raw_read_identifiers_search_post"];
  };
  "/api/v1/reference-genomes/": {
    /**
     * List Reference Genomes
     * @description List reference genomes.
     */
    get: operations["list_reference_genomes_api_v1_reference_genomes__get"];
  };
  "/api/v1/reference-genomes/organism-names": {
    /**
     * List Reference Genome Organism Names
     * @description List distinct reference genome organism names, in alphabetical order.
     */
    get: operations["list_reference_genome_organism_names_api_v1_reference_genomes_organism_names_get"];
  };
  "/api/v1/reference-genomes/{item_id}": {
    /**
     * Fetch Reference Genome
     * @description Fetch a single reference genome by ID.
     */
    get: operations["fetch_reference_genome_api_v1_reference_genomes__item_id__get"];
  };
  "/api/v1/score-sets/search": {
    /**
     * Search Score Sets
     * @description Search score sets.
     */
    post: operations["search_score_sets_api_v1_score_sets_search_post"];
  };
  "/api/v1/me/score-sets/search": {
    /**
     * Search My Score Sets
     * @description Search score sets created by the current user..
     */
    post: operations["search_my_score_sets_api_v1_me_score_sets_search_post"];
  };
  "/api/v1/score-sets/{urn}": {
    /**
     * Show Score Set
     * @description Fetch a single score set by URN.
     */
    get: operations["show_score_set_api_v1_score_sets__urn__get"];
    /**
     * Update Score Set
     * @description Update a score set.
     */
    put: operations["update_score_set_api_v1_score_sets__urn__put"];
    /**
     * Delete Score Set
     * @description Delete a score set.
     *
     * Raises
     *
     * Returns
     * _______
     * Does not return anything
     * string : HTTP code 200 successful but returning content
     * or
     * communitcate to client whether the operation succeeded
     * 204 if successful but not returning content - likely going with this
     */
    delete: operations["delete_score_set_api_v1_score_sets__urn__delete"];
  };
  "/api/v1/score-sets/{urn}/scores": {
    /**
     * Get Score Set Scores Csv
     * @description Return scores from a score set, identified by URN, in CSV format.
     */
    get: operations["get_score_set_scores_csv_api_v1_score_sets__urn__scores_get"];
  };
  "/api/v1/score-sets/{urn}/counts": {
    /**
     * Get Score Set Counts Csv
     * @description Return counts from a score set, identified by URN, in CSV format.
     */
    get: operations["get_score_set_counts_csv_api_v1_score_sets__urn__counts_get"];
  };
  "/api/v1/score-sets/{urn}/mapped-variants": {
    /**
     * Get Score Set Mapped Variants
     * @description Return mapped variants from a score set, identified by URN.
     */
    get: operations["get_score_set_mapped_variants_api_v1_score_sets__urn__mapped_variants_get"];
  };
  "/api/v1/score-sets/": {
    /**
     * Create Score Set
     * @description Create a score set.
     */
    post: operations["create_score_set_api_v1_score_sets__post"];
  };
  "/api/v1/score-sets/{urn}/variants/data": {
    /**
     * Upload Score Set Variant Data
     * @description Upload scores and variant count files for a score set, and initiate processing these files to
     * create variants.
     */
    post: operations["upload_score_set_variant_data_api_v1_score_sets__urn__variants_data_post"];
  };
  "/api/v1/score-sets/{urn}/publish": {
    /**
     * Publish Score Set
     * @description Publish a score set.
     */
    post: operations["publish_score_set_api_v1_score_sets__urn__publish_post"];
  };
  "/api/v1/target-gene-identifiers/search": {
    /**
     * Search Target Gene Identifiers
     * @description Search target gene identifiers.
     */
    post: operations["search_target_gene_identifiers_api_v1_target_gene_identifiers_search_post"];
  };
  "/api/v1/target-genes/": {
    /**
     * List Target Genes
     * @description List target genes.
     */
    get: operations["list_target_genes_api_v1_target_genes__get"];
  };
  "/api/v1/target-genes/names": {
    /**
     * List Target Gene Names
     * @description List distinct target gene names, in alphabetical order.
     */
    get: operations["list_target_gene_names_api_v1_target_genes_names_get"];
  };
  "/api/v1/target-genes/categories": {
    /**
     * List Target Gene Categories
     * @description List distinct target genes categories, in alphabetical order.
     */
    get: operations["list_target_gene_categories_api_v1_target_genes_categories_get"];
  };
  "/api/v1/target-genes/{item_id}": {
    /**
     * Fetch Target Gene
     * @description Fetch a single target gene by ID.
     */
    get: operations["fetch_target_gene_api_v1_target_genes__item_id__get"];
  };
  "/api/v1/target-genes/search": {
    /**
     * Search Target Genes
     * @description Search target genes.
     */
    post: operations["search_target_genes_api_v1_target_genes_search_post"];
  };
  "/api/v1/users/": {
    /**
     * List Users
     * @description List users.
     */
    get: operations["list_users_api_v1_users__get"];
  };
  "/api/v1/users/me": {
    /**
     * Show Me
     * @description Return the current user.
     */
    get: operations["show_me_api_v1_users_me_get"];
    /**
     * Update Me
     * @description Update the current user.
     */
    put: operations["update_me_api_v1_users_me_put"];
  };
  "/api/v1/users/{id}": {
    /**
     * Show User
     * @description Fetch a single user by ID.
     */
    get: operations["show_user_api_v1_users__id__get"];
  };
  "/api/v1/users//{id}": {
    /**
     * Update User
     * @description Update a user.
     */
    put: operations["update_user_api_v1_users___id__put"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AccessKey */
    AccessKey: {
      /** Keyid */
      keyId: string;
      /** Name */
      name?: string;
      /**
       * Expirationdate
       * Format: date
       */
      expirationDate?: string;
      /** Createdat */
      createdAt?: string;
    };
    /**
     * AdminUser
     * @description User view model containing properties to return to admin clients.
     */
    AdminUser: {
      /** Orcidid */
      orcidId: string;
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
      /** Id */
      id: number;
      /** Roles */
      roles: string[];
    };
    /**
     * AdminUserUpdate
     * @description View model for updating current user, for admin clients.
     */
    AdminUserUpdate: {
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
      /** Email */
      email?: string;
      /** Roles */
      roles: string[];
    };
    /** ApiVersion */
    ApiVersion: {
      /** Name */
      name: string;
      /** Version */
      version: string;
    };
    /** Body_upload_score_set_variant_data_api_v1_score_sets__urn__variants_data_post */
    Body_upload_score_set_variant_data_api_v1_score_sets__urn__variants_data_post: {
      /**
       * Counts File
       * Format: binary
       */
      counts_file?: string;
      /**
       * Scores File
       * Format: binary
       */
      scores_file: string;
    };
    /**
     * CurrentUser
     * @description User view model for information about the current user.
     */
    CurrentUser: {
      /** Orcidid */
      orcidId: string;
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
      /** Email */
      email?: string;
      /** Roles */
      roles: string[];
    };
    /**
     * CurrentUserUpdate
     * @description View model for updating the current user.
     */
    CurrentUserUpdate: {
      /** Email */
      email?: string;
    };
    /** DoiIdentifier */
    DoiIdentifier: {
      /** Identifier */
      identifier: string;
      /** Id */
      id: number;
      /** Url */
      url: string;
    };
    /** DoiIdentifierCreate */
    DoiIdentifierCreate: {
      /** Identifier */
      identifier: string;
    };
    /** Experiment */
    Experiment: {
      /** Title */
      title: string;
      /** Shortdescription */
      shortDescription: string;
      /** Abstracttext */
      abstractText?: string;
      /** Methodtext */
      methodText?: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Urn */
      urn: string;
      createdBy: components["schemas"]["User"];
      modifiedBy: components["schemas"]["User"];
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
      /**
       * Publisheddate
       * Format: date
       */
      publishedDate?: string;
      /** Experimentseturn */
      experimentSetUrn: string;
      /** Scoreseturns */
      scoreSetUrns: string[];
      /** Doiidentifiers */
      doiIdentifiers: components["schemas"]["DoiIdentifier"][];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers: components["schemas"]["PublicationIdentifier"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers: components["schemas"]["PublicationIdentifier"][];
      /** Rawreadidentifiers */
      rawReadIdentifiers: components["schemas"]["RawReadIdentifier"][];
      /** Processingstate */
      processingState?: string;
      /** Keywords */
      keywords: string[];
    };
    /** ExperimentCreate */
    ExperimentCreate: {
      /** Title */
      title: string;
      /** Shortdescription */
      shortDescription: string;
      /** Abstracttext */
      abstractText: string;
      /** Methodtext */
      methodText: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Keywords */
      keywords?: string[];
      /** Doiidentifiers */
      doiIdentifiers?: components["schemas"]["DoiIdentifierCreate"][];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Rawreadidentifiers */
      rawReadIdentifiers?: components["schemas"]["RawReadIdentifierCreate"][];
      /** Experimentseturn */
      experimentSetUrn?: string;
    };
    /** ExperimentSet */
    ExperimentSet: {
      /** Urn */
      urn: string;
      /**
       * Publisheddate
       * Format: date
       */
      publishedDate?: string;
      /** Id */
      id: number;
      /** Experiments */
      experiments: components["schemas"]["Experiment"][];
      createdBy?: components["schemas"]["User"];
      modifiedBy?: components["schemas"]["User"];
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
    };
    /** ExperimentUpdate */
    ExperimentUpdate: {
      /** Title */
      title: string;
      /** Shortdescription */
      shortDescription: string;
      /** Abstracttext */
      abstractText: string;
      /** Methodtext */
      methodText: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Keywords */
      keywords?: string[];
      /** Doiidentifiers */
      doiIdentifiers?: components["schemas"]["DoiIdentifierCreate"][];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Rawreadidentifiers */
      rawReadIdentifiers?: components["schemas"]["RawReadIdentifierCreate"][];
    };
    /** ExperimentsSearch */
    ExperimentsSearch: {
      /** Published */
      published?: boolean;
      /** Authors */
      authors?: string[];
      /** Databases */
      databases?: string[];
      /** Journals */
      journals?: string[];
      /** Publicationidentifiers */
      publicationIdentifiers?: string[];
      /** Text */
      text?: string;
    };
    /** ExternalGeneIdentifier */
    ExternalGeneIdentifier: {
      /** Dbname */
      dbName: string;
      /** Identifier */
      identifier: string;
      /** Dbversion */
      dbVersion?: string;
      /** Url */
      url?: string;
      /** Referencehtml */
      referenceHtml?: string;
    };
    /** ExternalGeneIdentifierCreate */
    ExternalGeneIdentifierCreate: {
      /** Dbname */
      dbName: string;
      /** Identifier */
      identifier: string;
    };
    /** ExternalGeneIdentifierOffset */
    ExternalGeneIdentifierOffset: {
      identifier: components["schemas"]["ExternalGeneIdentifier"];
      /** Offset */
      offset: number;
    };
    /** ExternalGeneIdentifierOffsetCreate */
    ExternalGeneIdentifierOffsetCreate: {
      identifier: components["schemas"]["ExternalGeneIdentifierCreate"];
      /** Offset */
      offset: number;
    };
    /** ExternalPublicationIdentifier */
    ExternalPublicationIdentifier: {
      /** Identifier */
      identifier: string;
      /** Dbname */
      dbName?: string;
      /** Url */
      url: string;
      /** Referencehtml */
      referenceHtml: string;
      /** Title */
      title: string;
      /** Abstract */
      abstract?: string;
      /** Authors */
      authors: {
          [key: string]: string;
        }[];
      /** Publicationdoi */
      publicationDoi?: string;
      /** Preprintdoi */
      preprintDoi?: string;
      /** Publicationyear */
      publicationYear?: number;
      /**
       * Preprintdate
       * Format: date
       */
      preprintDate?: string;
      /** Publicationjournal */
      publicationJournal?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * License
     * @description License view model containing properties visible to all users.
     */
    License: {
      /** Longname */
      longName: string;
      /** Shortname */
      shortName: string;
      /** Link */
      link?: string;
      /** Version */
      version?: string;
      /** Id */
      id: number;
      /** Text */
      text: string;
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
    };
    /** MappedVariant */
    MappedVariant: {
      /** Premapped */
      preMapped?: unknown;
      /** Postmapped */
      postMapped?: unknown;
      /** Variantid */
      variantId: number;
      /** Id */
      id: number;
    };
    /** NewAccessKey */
    NewAccessKey: {
      /** Keyid */
      keyId: string;
      /** Name */
      name?: string;
      /**
       * Expirationdate
       * Format: date
       */
      expirationDate?: string;
      /** Createdat */
      createdAt?: string;
      /** Privatekey */
      privateKey: string;
    };
    /** PublicationIdentifier */
    PublicationIdentifier: {
      /** Identifier */
      identifier: string;
      /** Dbname */
      dbName?: string;
      /** Url */
      url: string;
      /** Referencehtml */
      referenceHtml: string;
      /** Title */
      title: string;
      /** Abstract */
      abstract?: string;
      /** Authors */
      authors: {
          [key: string]: string;
        }[];
      /** Publicationdoi */
      publicationDoi?: string;
      /** Preprintdoi */
      preprintDoi?: string;
      /** Publicationyear */
      publicationYear?: number;
      /**
       * Preprintdate
       * Format: date
       */
      preprintDate?: string;
      /** Publicationjournal */
      publicationJournal?: string;
      /** Id */
      id: number;
    };
    /** PublicationIdentifierCreate */
    PublicationIdentifierCreate: {
      /** Identifier */
      identifier: string;
      /** Dbname */
      dbName?: string;
    };
    /** RawReadIdentifier */
    RawReadIdentifier: {
      /** Identifier */
      identifier: string;
      /** Id */
      id: number;
      /** Url */
      url: string;
    };
    /** RawReadIdentifierCreate */
    RawReadIdentifierCreate: {
      /** Identifier */
      identifier: string;
    };
    /** ReferenceGenome */
    ReferenceGenome: {
      /** Shortname */
      shortName: string;
      /** Organismname */
      organismName: string;
      /** Genomeid */
      genomeId?: number;
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
      /** Id */
      id: number;
    };
    /** SavedDoiIdentifier */
    SavedDoiIdentifier: {
      /** Identifier */
      identifier: string;
      /** Id */
      id: number;
      /** Url */
      url: string;
    };
    /** SavedPublicationIdentifier */
    SavedPublicationIdentifier: {
      /** Identifier */
      identifier: string;
      /** Dbname */
      dbName?: string;
      /** Url */
      url: string;
      /** Referencehtml */
      referenceHtml: string;
      /** Title */
      title: string;
      /** Abstract */
      abstract?: string;
      /** Authors */
      authors: {
          [key: string]: string;
        }[];
      /** Publicationdoi */
      publicationDoi?: string;
      /** Preprintdoi */
      preprintDoi?: string;
      /** Publicationyear */
      publicationYear?: number;
      /**
       * Preprintdate
       * Format: date
       */
      preprintDate?: string;
      /** Publicationjournal */
      publicationJournal?: string;
      /** Id */
      id: number;
    };
    /** SavedRawReadIdentifier */
    SavedRawReadIdentifier: {
      /** Identifier */
      identifier: string;
      /** Id */
      id: number;
      /** Url */
      url: string;
    };
    /** SavedTargetAccession */
    SavedTargetAccession: {
      /** Accession */
      accession: string;
      /** Assembly */
      assembly?: string;
      /** Gene */
      gene?: string;
    };
    /** SavedTargetSequence */
    SavedTargetSequence: {
      /** Sequencetype */
      sequenceType: string;
      /** Sequence */
      sequence: string;
      /** Label */
      label?: string;
      reference: components["schemas"]["ReferenceGenome"];
    };
    /**
     * SavedUser
     * @description Base class for user view models representing saved records.
     */
    SavedUser: {
      /** Orcidid */
      orcidId: string;
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
    };
    /**
     * ScoreSet
     * @description Score set view model containing most properties visible to non-admin users, but no variant data.
     */
    ScoreSet: {
      /** Title */
      title: string;
      /** Methodtext */
      methodText: string;
      /** Abstracttext */
      abstractText: string;
      /** Shortdescription */
      shortDescription: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Datausagepolicy */
      dataUsagePolicy?: string;
      /** Urn */
      urn: string;
      /** Numvariants */
      numVariants: number;
      experiment: components["schemas"]["Experiment"];
      license: components["schemas"]["ShortLicense"];
      /** Supersededscoreseturn */
      supersededScoreSetUrn?: string;
      /** Supersedingscoreseturn */
      supersedingScoreSetUrn?: string;
      /** Metaanalyzesscoreseturns */
      metaAnalyzesScoreSetUrns: string[];
      /** Metaanalyzedbyscoreseturns */
      metaAnalyzedByScoreSetUrns: string[];
      /** Doiidentifiers */
      doiIdentifiers: components["schemas"]["DoiIdentifier"][];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers: components["schemas"]["PublicationIdentifier"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers: components["schemas"]["PublicationIdentifier"][];
      /**
       * Publisheddate
       * Format: date
       */
      publishedDate?: string;
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
      createdBy?: components["schemas"]["User"];
      modifiedBy?: components["schemas"]["User"];
      /** Targetgenes */
      targetGenes: components["schemas"]["TargetGene"][];
      /** Datasetcolumns */
      datasetColumns: Record<string, never>;
      /** Keywords */
      keywords: string[];
      /** Private */
      private: boolean;
    };
    /**
     * ScoreSetCreate
     * @description View model for creating a new score set.
     */
    ScoreSetCreate: {
      /** Title */
      title: string;
      /** Methodtext */
      methodText: string;
      /** Abstracttext */
      abstractText: string;
      /** Shortdescription */
      shortDescription: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Datausagepolicy */
      dataUsagePolicy?: string;
      /** Keywords */
      keywords?: string[];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Doiidentifiers */
      doiIdentifiers?: components["schemas"]["DoiIdentifierCreate"][];
      /** Targetgenes */
      targetGenes: components["schemas"]["TargetGeneCreate"][];
      /** Experimenturn */
      experimentUrn?: string;
      /** Licenseid */
      licenseId: number;
      /** Supersededscoreseturn */
      supersededScoreSetUrn?: string;
      /** Metaanalyzesscoreseturns */
      metaAnalyzesScoreSetUrns?: string[];
    };
    /**
     * ScoreSetUpdate
     * @description View model for updating a score set.
     */
    ScoreSetUpdate: {
      /** Title */
      title: string;
      /** Methodtext */
      methodText: string;
      /** Abstracttext */
      abstractText: string;
      /** Shortdescription */
      shortDescription: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Datausagepolicy */
      dataUsagePolicy?: string;
      /** Keywords */
      keywords?: string[];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers?: components["schemas"]["PublicationIdentifierCreate"][];
      /** Doiidentifiers */
      doiIdentifiers?: components["schemas"]["DoiIdentifierCreate"][];
      /** Targetgenes */
      targetGenes: components["schemas"]["TargetGeneCreate"][];
      /** Licenseid */
      licenseId?: number;
    };
    /** ScoreSetsSearch */
    ScoreSetsSearch: {
      /** Published */
      published?: boolean;
      /** Targets */
      targets?: string[];
      /** Targetorganismnames */
      targetOrganismNames?: string[];
      /** Targettypes */
      targetTypes?: string[];
      /** Targetaccessions */
      targetAccessions?: string[];
      /** Authors */
      authors?: string[];
      /** Databases */
      databases?: string[];
      /** Journals */
      journals?: string[];
      /** Publicationidentifiers */
      publicationIdentifiers?: string[];
      /** Text */
      text?: string;
    };
    /** ShortExperiment */
    ShortExperiment: {
      /** Title */
      title: string;
      /** Shortdescription */
      shortDescription: string;
      /** Abstracttext */
      abstractText?: string;
      /** Methodtext */
      methodText?: string;
      /** Extrametadata */
      extraMetadata?: Record<string, never>;
      /** Urn */
      urn: string;
      createdBy: components["schemas"]["SavedUser"];
      modifiedBy: components["schemas"]["SavedUser"];
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
      /**
       * Publisheddate
       * Format: date
       */
      publishedDate?: string;
      /** Experimentseturn */
      experimentSetUrn: string;
      /** Scoreseturns */
      scoreSetUrns: string[];
      /** Doiidentifiers */
      doiIdentifiers: components["schemas"]["SavedDoiIdentifier"][];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers: components["schemas"]["SavedPublicationIdentifier"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers: components["schemas"]["SavedPublicationIdentifier"][];
      /** Rawreadidentifiers */
      rawReadIdentifiers: components["schemas"]["SavedRawReadIdentifier"][];
      /** Processingstate */
      processingState?: string;
      /** Keywords */
      keywords: string[];
    };
    /**
     * ShortLicense
     * @description License view model containing a smaller set of properties to return in list contexts.
     */
    ShortLicense: {
      /** Longname */
      longName: string;
      /** Shortname */
      shortName: string;
      /** Link */
      link?: string;
      /** Version */
      version?: string;
      /** Id */
      id: number;
    };
    /**
     * ShortScoreSet
     * @description Score set view model containing a smaller set of properties to return in list contexts.
     *
     * Notice that this is not derived from ScoreSetBase.
     */
    ShortScoreSet: {
      /** Urn */
      urn: string;
      /** Title */
      title: string;
      /** Shortdescription */
      shortDescription: string;
      /**
       * Publisheddate
       * Format: date
       */
      publishedDate?: string;
      /** Replacesid */
      replacesId?: number;
      /** Numvariants */
      numVariants: number;
      experiment: components["schemas"]["Experiment"];
      /** Primarypublicationidentifiers */
      primaryPublicationIdentifiers: components["schemas"]["SavedPublicationIdentifier"][];
      /** Secondarypublicationidentifiers */
      secondaryPublicationIdentifiers: components["schemas"]["SavedPublicationIdentifier"][];
      license: components["schemas"]["ShortLicense"];
      /**
       * Creationdate
       * Format: date
       */
      creationDate: string;
      /**
       * Modificationdate
       * Format: date
       */
      modificationDate: string;
      /** Targetgenes */
      targetGenes: components["schemas"]["ShortTargetGene"][];
      /** Private */
      private: boolean;
    };
    /**
     * ShortTargetGene
     * @description Target gene view model containing a smaller set of properties to return in list contexts.
     */
    ShortTargetGene: {
      /** Name */
      name: string;
      /** Category */
      category: string;
      /** Externalidentifiers */
      externalIdentifiers: components["schemas"]["ExternalGeneIdentifierOffset"][];
      /** Id */
      id: number;
      targetSequence?: components["schemas"]["SavedTargetSequence"];
      targetAccession?: components["schemas"]["SavedTargetAccession"];
    };
    /** TargetAccession */
    TargetAccession: {
      /** Accession */
      accession: string;
      /** Assembly */
      assembly?: string;
      /** Gene */
      gene?: string;
    };
    /** TargetAccessionCreate */
    TargetAccessionCreate: {
      /** Accession */
      accession: string;
      /** Assembly */
      assembly?: string;
      /** Gene */
      gene?: string;
    };
    /**
     * TargetGene
     * @description Target gene view model containing a complete set of properties visible to non-admin users.
     */
    TargetGene: {
      /** Name */
      name: string;
      /** Category */
      category: string;
      /** Externalidentifiers */
      externalIdentifiers: components["schemas"]["ExternalGeneIdentifierOffset"][];
      /** Id */
      id: number;
      targetSequence?: components["schemas"]["TargetSequence"];
      targetAccession?: components["schemas"]["TargetAccession"];
    };
    /**
     * TargetGeneCreate
     * @description View model for creating a new target gene.
     */
    TargetGeneCreate: {
      /** Name */
      name: string;
      /** Category */
      category: string;
      /** Externalidentifiers */
      externalIdentifiers: components["schemas"]["ExternalGeneIdentifierOffsetCreate"][];
      targetSequence?: components["schemas"]["TargetSequenceCreate"];
      targetAccession?: components["schemas"]["TargetAccessionCreate"];
    };
    /** TargetSequence */
    TargetSequence: {
      /** Sequencetype */
      sequenceType: string;
      /** Sequence */
      sequence: string;
      /** Label */
      label?: string;
      reference: components["schemas"]["ReferenceGenome"];
    };
    /** TargetSequenceCreate */
    TargetSequenceCreate: {
      /** Sequencetype */
      sequenceType: string;
      /** Sequence */
      sequence: string;
      /** Label */
      label?: string;
      reference: components["schemas"]["ReferenceGenome"];
    };
    /** TextSearch */
    TextSearch: {
      /** Text */
      text?: string;
    };
    /**
     * User
     * @description User view model containing properties visible to non-admin users.
     */
    User: {
      /** Orcidid */
      orcidId: string;
      /** Firstname */
      firstName?: string;
      /** Lastname */
      lastName?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List My Access Keys
   * @description List the current user's access keys.
   */
  list_my_access_keys_api_v1_users_me_access_keys_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AccessKey"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create My Access Key
   * @description Create a new access key for the current user.
   */
  create_my_access_key_api_v1_users_me_access_keys_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NewAccessKey"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete My Access Key
   * @description Delete one of the current user's access keys.
   */
  delete_my_access_key_api_v1_users_me_access_keys__key_id__delete: {
    parameters: {
      path: {
        key_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Show Version
   * @description Describe the API version.
   */
  show_version_api_v1_api_version_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ApiVersion"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Search Doi Identifiers
   * @description Search DOI identifiers.
   */
  search_doi_identifiers_api_v1_doi_identifiers_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DoiIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Fetch Experiment Set
   * @description Fetch a single experiment set by URN.
   */
  fetch_experiment_set_api_v1_experiment_sets__urn__get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExperimentSet"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Experiments
   * @description List experiments.
   */
  list_experiments_api_v1_experiments__get: {
    parameters: {
      query?: {
        editable?: boolean;
        q?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Experiment
   * @description Create an experiment.
   */
  create_experiment_api_v1_experiments__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Search Experiments
   * @description Search experiments.
   */
  search_experiments_api_v1_experiments_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentsSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShortExperiment"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search My Experiments
   * @description Search experiments created by the current user..
   */
  search_my_experiments_api_v1_me_experiments_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentsSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShortExperiment"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Fetch Experiment
   * @description Fetch a single experiment by URN.
   */
  fetch_experiment_api_v1_experiments__urn__get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Experiment
   * @description Update an experiment.
   */
  update_experiment_api_v1_experiments__urn__put: {
    parameters: {
      path: {
        urn: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Delete Experiment
   * @description Delete a experiment .
   *
   * Raises
   *
   * Returns
   * _______
   * Does not return anything
   * string : HTTP code 200 successful but returning content
   * or
   * communitcate to client whether the operation succeeded
   * 204 if successful but not returning content - likely going with this
   */
  delete_experiment_api_v1_experiments__urn__delete: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get Experiment Score Sets
   * @description Get all score sets belonging to an experiment.
   */
  get_experiment_score_sets_api_v1_experiments__urn__score_sets_get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Hgvs Fetch
   * @description List stored sequences
   */
  hgvs_fetch_api_v1_hgvs_fetch__accession__get: {
    parameters: {
      path: {
        accession: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Hgvs Validate
   * @description List stored sequences
   */
  hgvs_validate_api_v1_hgvs_validate_post: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Assemblies
   * @description List stored assemblies
   */
  list_assemblies_api_v1_hgvs_assemblies_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Assemblies Grouped
   * @description List stored assemblies in groups of major/minor versions
   */
  list_assemblies_grouped_api_v1_hgvs_grouped_assemblies_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": ({
              [key: string]: string | string[];
            })[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Accessions
   * @description List stored accessions
   */
  list_accessions_api_v1_hgvs__assembly__accessions_get: {
    parameters: {
      path: {
        assembly: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Genes */
  list_genes_api_v1_hgvs_genes_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /** Gene Info */
  gene_info_api_v1_hgvs_genes__gene__get: {
    parameters: {
      path: {
        gene: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Transcripts For Gene */
  list_transcripts_for_gene_api_v1_hgvs_transcripts_gene__gene__get: {
    parameters: {
      path: {
        gene: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Transcript Info */
  transcript_info_api_v1_hgvs_transcripts__transcript__get: {
    parameters: {
      path: {
        transcript: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Convert To Protein */
  convert_to_protein_api_v1_hgvs_transcripts_protein__transcript__get: {
    parameters: {
      path: {
        transcript: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Licenses
   * @description List licenses.
   */
  list_licenses_api_v1_licenses__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShortLicense"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Fetch License
   * @description Fetch a single license by ID.
   */
  fetch_license_api_v1_licenses__item_id__get: {
    parameters: {
      path: {
        item_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["License"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Show Mapped Variant
   * @description Fetch a mapped variant by URN.
   */
  show_mapped_variant_api_v1_mapped_variants__urn__get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MappedVariant"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * List Publications
   * @description List stored all stored publications.
   */
  list_publications_api_v1_publication_identifiers__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Fetch Publication By Identifier
   * @description Fetch a single publication by identifier.
   */
  fetch_publication_by_identifier_api_v1_publication_identifiers__identifier__get: {
    parameters: {
      path: {
        identifier: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Fetch Publication By Dbname And Identifier
   * @description Fetch a single publication by db name and identifier.
   */
  fetch_publication_by_dbname_and_identifier_api_v1_publication_identifiers__db_name___identifier__get: {
    parameters: {
      path: {
        db_name: string;
        identifier: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Publication Journal Names
   * @description List distinct journal names, in alphabetical order.
   */
  list_publication_journal_names_api_v1_publication_identifiers_journals_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Publication Database Names
   * @description List distinct database names, in alphabetical order.
   */
  list_publication_database_names_api_v1_publication_identifiers_databases_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Search Publication Identifiers
   * @description Search publication identifiers via a TextSearch query.
   */
  search_publication_identifiers_api_v1_publication_identifiers_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Publications By Identifier
   * @description Search publication identifiers via their identifier.
   */
  search_publications_by_identifier_api_v1_publication_identifiers_search__identifier__get: {
    parameters: {
      path: {
        identifier: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Search Publications By Identifier And Db
   * @description Search publication identifiers via their identifier and database.
   */
  search_publications_by_identifier_and_db_api_v1_publication_identifiers_search__db_name___identifier__get: {
    parameters: {
      path: {
        identifier: string;
        db_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublicationIdentifier"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Search External Publication Identifiers
   * @description Search external publication identifiers via a TextSearch query.
   * Technically, this should be some sort of accepted publication identifier.
   */
  search_external_publication_identifiers_api_v1_publication_identifiers_search_external_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalPublicationIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Raw Read Identifiers
   * @description Search Raw Read identifiers.
   */
  search_raw_read_identifiers_api_v1_raw_read_identifiers_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RawReadIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Reference Genomes
   * @description List reference genomes.
   */
  list_reference_genomes_api_v1_reference_genomes__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReferenceGenome"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Reference Genome Organism Names
   * @description List distinct reference genome organism names, in alphabetical order.
   */
  list_reference_genome_organism_names_api_v1_reference_genomes_organism_names_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Fetch Reference Genome
   * @description Fetch a single reference genome by ID.
   */
  fetch_reference_genome_api_v1_reference_genomes__item_id__get: {
    parameters: {
      path: {
        item_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReferenceGenome"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Score Sets
   * @description Search score sets.
   */
  search_score_sets_api_v1_score_sets_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreSetsSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShortScoreSet"][];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search My Score Sets
   * @description Search score sets created by the current user..
   */
  search_my_score_sets_api_v1_me_score_sets_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreSetsSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShortScoreSet"][];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Show Score Set
   * @description Fetch a single score set by URN.
   */
  show_score_set_api_v1_score_sets__urn__get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update Score Set
   * @description Update a score set.
   */
  update_score_set_api_v1_score_sets__urn__put: {
    parameters: {
      path: {
        urn: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreSetUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Delete Score Set
   * @description Delete a score set.
   *
   * Raises
   *
   * Returns
   * _______
   * Does not return anything
   * string : HTTP code 200 successful but returning content
   * or
   * communitcate to client whether the operation succeeded
   * 204 if successful but not returning content - likely going with this
   */
  delete_score_set_api_v1_score_sets__urn__delete: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get Score Set Scores Csv
   * @description Return scores from a score set, identified by URN, in CSV format.
   */
  get_score_set_scores_csv_api_v1_score_sets__urn__scores_get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Variant scores in CSV format, with four fixed columns (accession, hgvs_nt, hgvs_pro, and hgvs_splice), plus score columns defined by the score set. */
      200: {
        content: {
          "application/json": unknown;
          "text/csv": unknown;
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Score Set Counts Csv
   * @description Return counts from a score set, identified by URN, in CSV format.
   */
  get_score_set_counts_csv_api_v1_score_sets__urn__counts_get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Variant counts in CSV format, with four fixed columns (accession, hgvs_nt, hgvs_pro, and hgvs_splice), plus score columns defined by the score set. */
      200: {
        content: {
          "application/json": unknown;
          "text/csv": unknown;
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Score Set Mapped Variants
   * @description Return mapped variants from a score set, identified by URN.
   */
  get_score_set_mapped_variants_api_v1_score_sets__urn__mapped_variants_get: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MappedVariant"][];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Score Set
   * @description Create a score set.
   */
  create_score_set_api_v1_score_sets__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreSetCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Upload Score Set Variant Data
   * @description Upload scores and variant count files for a score set, and initiate processing these files to
   * create variants.
   */
  upload_score_set_variant_data_api_v1_score_sets__urn__variants_data_post: {
    parameters: {
      path: {
        urn: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_score_set_variant_data_api_v1_score_sets__urn__variants_data_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Unprocessable Entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Publish Score Set
   * @description Publish a score set.
   */
  publish_score_set_api_v1_score_sets__urn__publish_post: {
    parameters: {
      path: {
        urn: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScoreSet"];
        };
      };
      /** @description not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Target Gene Identifiers
   * @description Search target gene identifiers.
   */
  search_target_gene_identifiers_api_v1_target_gene_identifiers_search_post: {
    parameters: {
      query: {
        db_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalGeneIdentifier"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Target Genes
   * @description List target genes.
   */
  list_target_genes_api_v1_target_genes__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetGene"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Target Gene Names
   * @description List distinct target gene names, in alphabetical order.
   */
  list_target_gene_names_api_v1_target_genes_names_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * List Target Gene Categories
   * @description List distinct target genes categories, in alphabetical order.
   */
  list_target_gene_categories_api_v1_target_genes_categories_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Fetch Target Gene
   * @description Fetch a single target gene by ID.
   */
  fetch_target_gene_api_v1_target_genes__item_id__get: {
    parameters: {
      path: {
        item_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetGene"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search Target Genes
   * @description Search target genes.
   */
  search_target_genes_api_v1_target_genes_search_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextSearch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetGene"][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Users
   * @description List users.
   */
  list_users_api_v1_users__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUser"][];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Show Me
   * @description Return the current user.
   */
  show_me_api_v1_users_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CurrentUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update Me
   * @description Update the current user.
   */
  update_me_api_v1_users_me_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CurrentUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Show User
   * @description Fetch a single user by ID.
   */
  show_user_api_v1_users__id__get: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update User
   * @description Update a user.
   */
  update_user_api_v1_users___id__put: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminUserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUser"];
        };
      };
      /** @description Not Found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
}
